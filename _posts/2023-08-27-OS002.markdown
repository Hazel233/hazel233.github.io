---
layout:     post
title:      "Operating System"
subtitle:   "OS-002"
date:       2023-09-17
author:     "Hazel"
header-img: "img/"
catalog: true
tags:
    - Learning
    - Operating System
---

# 操作系统的发展与分类

- 手工操作阶段
- 批处理阶段-单通道处理阶段：监督程序 脱机输入/输出技术
- 批处理阶段-多道批处理系统：并发进行，没有人机交互
- 分时操作系统-轮流为用户服务，没有优先级
- 实时操作系统-有时限，有优先级，可靠、及时
- 网络操作系统，分布式操作系统，个人计算机操作系统


# 操作系统的运行机制
补充：程序是如何运行的？
C语言代码 ——> 机器指令
指令：就是处理器能识别、执行的最基本命令

## 两种指令
- 特权指令
- 非特权指令
在cpu设计和生产的时候划分了特权指令和非特权指令，普通应用程序只能用非特权指令
## 两种处理器状态
- 内核态，管态
- 用户态，目态，只能执行非特权指令
两种状态的切换：
内核态到用户态，执行一条特权指令，修改psw标志位为用户态；用户态到哪和态，由中断信号引发，出发这个信号意味着操作系统强行夺回执行权。
## 两种程序
- 内核程序
- 应用程序

## 内核
操作系统最核心的部分，很多内核程序组成操做系统内核

# 中断和异常

## 中断的作用
可以并发，让操作系统内核强行夺回cpu的控制权，是cpu从用户态变为内核态
## 中断的类型
- 内中断：陷入trap，故障fault（可能可以修复的），终止abort
中断信号来源于cpu内部，例如，应用程序想要操作系统内核的服务，可以执行陷入指令，引发一个内部中断信号
- 外中断：时钟中断，i/o中断
如时钟中断，时钟每隔一段时间会给cpu发送一个时钟中断信号
## 中断机制的基本原理
中断向量表：根据不同的中断信号，找到相应的中断处理程序
中断处理程序需要运行在内核态